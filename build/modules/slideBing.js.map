{
  "version": 3,
  "sources": ["../../src/modules/slideBing.ts"],
  "sourcesContent": ["import axios from \"axios\";\nimport { GlobalHelper } from \"./global-helper\"\n\ninterface BingJSONImage{\n\turl: string,\n\ttitle: string,\n\tcopyright: string,\n\tstartdate: string,\n\tany: string|boolean|number\n}\n\ninterface BingJSONImageList{\n\timages: BingJSONImage[],\n\tany: any\n}\n\nexport interface BingPicture{\n\tbingurl: string,\n\tpath: string,\n\turl: string,\n\tinfo1: string,\n\tinfo2: string,\n\tinfo3: string,\n\tdate: Date\n}\n\nexport interface BingPictureListUpdateResult{\n\tsuccess: boolean;\n\tpicturecount: number;\n}\n\nconst BingUrl = \"https://www.bing.com/HPImageArchive.aspx?format=js&idx=0&n=10&mkt=de-DE\";\nlet BingPictureList: BingPicture[];\nlet CurrentImage: BingPicture;\n\nexport async function getPicture(Helper: GlobalHelper): Promise<BingPicture | null > {\n\ttry{\n\t\tif (BingPictureList.length === 0){\n\t\t\tawait updatePictureList(Helper);\n\t\t}\n\t\tif (BingPictureList.length !== 0){\n\t\t\tif (!CurrentImage){\n\t\t\t\tCurrentImage = BingPictureList[0];\n\t\t\t} else {\n\t\t\t\tif (BingPictureList.indexOf(CurrentImage) === BingPictureList.length - 1){\n\t\t\t\t\tCurrentImage = BingPictureList[0];\n\t\t\t\t} else {\n\t\t\t\t\tCurrentImage = BingPictureList[BingPictureList.indexOf(CurrentImage) + 1];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn CurrentImage;\n\t\t}\n\t\treturn null;\n\t}catch (err){\n\t\tHelper.ReportingError(err as Error, \"Unknown Error\", \"Bing\", \"getPicture\");\n\t\treturn null;\n\t}\n}\n\nexport async function updatePictureList(Helper: GlobalHelper): Promise<BingPictureListUpdateResult> {\n\t// Getting List from Bing.com\n\ttry{\n\t\tBingPictureList = [];\n\t\tconst WebResult = await axios.get(BingUrl);\n\t\tHelper.ReportingInfo(\"Debug\", \"Bing\", \"Picture list received\", { JSON: JSON.stringify(WebResult.data) });\n\t\t((WebResult.data) as BingJSONImageList).images.forEach(Image =>{\n\t\t\tconst ImageDetails = Image.copyright.match(/(.*)\\s\\(\u00A9\\s(.*)\\)/);\n\t\t\tlet ImageDescription = \"\";\n\t\t\tlet ImageCopyright = \"\"\n\t\t\tif (ImageDetails){\n\t\t\t\tImageDescription = ImageDetails[1];\n\t\t\t\tImageCopyright = ImageDetails[2];\n\t\t\t}\n\t\t\tconst ImageDate = new Date(parseInt(Image.startdate.substring(0,4)), parseInt(Image.startdate.substring(4,6)), parseInt(Image.startdate.substring(6,8)));\n\t\t\tif (Array.isArray(BingPictureList)){\n\t\t\t\tBingPictureList.push( {bingurl: \"https://bing.com\" + Image.url, url: \"\", path: \"\", info1: Image.title, info2: ImageDescription, info3: ImageCopyright, date: ImageDate} );\n\t\t\t} else{\n\t\t\t\tBingPictureList = [ {bingurl: \"https://bing.com\" + Image.url, url: \"\", path: \"\", info1: Image.title, info2: ImageDescription, info3: ImageCopyright, date: ImageDate} ];\n\t\t\t}\n\t\t});\n\t\tHelper.ReportingInfo(\"Debug\", \"Bing\", `Picture List from Bing: ${JSON.stringify(BingPictureList)}`,{JSON: JSON.stringify(BingPictureList.slice(0,10))});\n\t} catch (err) {\n\t\tHelper.ReportingError(err as Error, \"Unknown Error\", \"Bing\", \"updatePictureList/List\");\n\t\treturn { success: false, picturecount: 0};\n\t}\n\t// Saving list to files\n\ttry{\n\t\tfor (const CountElement in BingPictureList){\n\t\t\tconst currentWebCall = await axios.get(BingPictureList[CountElement].bingurl,{responseType: \"arraybuffer\"});\n\t\t\tawait Helper.Adapter.writeFileAsync(Helper.Adapter.namespace, `bing/${CountElement}.jpg`, currentWebCall.data);\n\t\t\tBingPictureList[CountElement].url = `/${Helper.Adapter.namespace}/bing/${CountElement}.jpg`;\n\t\t\tBingPictureList[CountElement].path = BingPictureList[CountElement].url;\n\t\t}\n\t\tHelper.ReportingInfo(\"Info\", \"Bing\", `${BingPictureList.length} pictures downloaded from Bing`, {JSON: JSON.stringify(BingPictureList.slice(0, 10))} );\n\t\treturn { success: true, picturecount: BingPictureList.length};\n\t} catch (err){\n\t\tHelper.ReportingError(err as Error, \"Unknown Error\", \"Bing\", \"updatePictureList/Download\");\n\t\treturn { success: false, picturecount: 0};\n\t}\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AA+BlB,MAAM,UAAU;AAChB,IAAI;AACJ,IAAI;AAEJ,0BAAiC,QAAoD;AACpF,MAAG;AACF,QAAI,gBAAgB,WAAW,GAAE;AAChC,YAAM,kBAAkB;AAAA;AAEzB,QAAI,gBAAgB,WAAW,GAAE;AAChC,UAAI,CAAC,cAAa;AACjB,uBAAe,gBAAgB;AAAA,aACzB;AACN,YAAI,gBAAgB,QAAQ,kBAAkB,gBAAgB,SAAS,GAAE;AACxE,yBAAe,gBAAgB;AAAA,eACzB;AACN,yBAAe,gBAAgB,gBAAgB,QAAQ,gBAAgB;AAAA;AAAA;AAGzE,aAAO;AAAA;AAER,WAAO;AAAA,WACA,KAAP;AACA,WAAO,eAAe,KAAc,iBAAiB,QAAQ;AAC7D,WAAO;AAAA;AAAA;AAIT,iCAAwC,QAA4D;AAEnG,MAAG;AACF,sBAAkB;AAClB,UAAM,YAAY,MAAM,qBAAM,IAAI;AAClC,WAAO,cAAc,SAAS,QAAQ,yBAAyB,EAAE,MAAM,KAAK,UAAU,UAAU;AAChG,IAAE,UAAU,KAA4B,OAAO,QAAQ,WAAQ;AAC9D,YAAM,eAAe,MAAM,UAAU,MAAM;AAC3C,UAAI,mBAAmB;AACvB,UAAI,iBAAiB;AACrB,UAAI,cAAa;AAChB,2BAAmB,aAAa;AAChC,yBAAiB,aAAa;AAAA;AAE/B,YAAM,YAAY,IAAI,KAAK,SAAS,MAAM,UAAU,UAAU,GAAE,KAAK,SAAS,MAAM,UAAU,UAAU,GAAE,KAAK,SAAS,MAAM,UAAU,UAAU,GAAE;AACpJ,UAAI,MAAM,QAAQ,kBAAiB;AAClC,wBAAgB,KAAM,EAAC,SAAS,qBAAqB,MAAM,KAAK,KAAK,IAAI,MAAM,IAAI,OAAO,MAAM,OAAO,OAAO,kBAAkB,OAAO,gBAAgB,MAAM;AAAA,aACxJ;AACL,0BAAkB,CAAE,EAAC,SAAS,qBAAqB,MAAM,KAAK,KAAK,IAAI,MAAM,IAAI,OAAO,MAAM,OAAO,OAAO,kBAAkB,OAAO,gBAAgB,MAAM;AAAA;AAAA;AAG7J,WAAO,cAAc,SAAS,QAAQ,2BAA2B,KAAK,UAAU,oBAAmB,EAAC,MAAM,KAAK,UAAU,gBAAgB,MAAM,GAAE;AAAA,WACzI,KAAP;AACD,WAAO,eAAe,KAAc,iBAAiB,QAAQ;AAC7D,WAAO,EAAE,SAAS,OAAO,cAAc;AAAA;AAGxC,MAAG;AACF,eAAW,gBAAgB,iBAAgB;AAC1C,YAAM,iBAAiB,MAAM,qBAAM,IAAI,gBAAgB,cAAc,SAAQ,EAAC,cAAc;AAC5F,YAAM,OAAO,QAAQ,eAAe,OAAO,QAAQ,WAAW,QAAQ,oBAAoB,eAAe;AACzG,sBAAgB,cAAc,MAAM,IAAI,OAAO,QAAQ,kBAAkB;AACzE,sBAAgB,cAAc,OAAO,gBAAgB,cAAc;AAAA;AAEpE,WAAO,cAAc,QAAQ,QAAQ,GAAG,gBAAgB,wCAAwC,EAAC,MAAM,KAAK,UAAU,gBAAgB,MAAM,GAAG;AAC/I,WAAO,EAAE,SAAS,MAAM,cAAc,gBAAgB;AAAA,WAC9C,KAAP;AACD,WAAO,eAAe,KAAc,iBAAiB,QAAQ;AAC7D,WAAO,EAAE,SAAS,OAAO,cAAc;AAAA;AAAA;",
  "names": []
}
