{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.0.1\n */\n\n//#region Imports, Variables and Global\nimport * as utils from \"@iobroker/adapter-core\";\nimport {GlobalHelper} from \"./modules/global-helper\";\nimport * as slideBing from \"./modules/slideBing\";\nimport * as slideLocal from \"./modules/slideLocal\";\nimport * as slideFS from \"./modules/slideFS\";\nimport * as slideSyno from \"./modules/slideSynology\"\n\nlet Helper: GlobalHelper;\nconst MsgErrUnknown = \"Unknown Error\";\nlet UpdateRunning = false;\n\ninterface Picture{\n\turl: string;\n\tpath: string;\n\tinfo1: string;\n\tinfo2: string;\n\tinfo3: string;\n\tdate: Date | null ;\n}\n\ninterface PictureListUpdateResult{\n\tsuccess: boolean;\n\tpicturecount: number;\n}\n//#endregion\n\nclass Slideshow extends utils.Adapter {\n\n\tisUnloaded: boolean;\n\n\t//#region Basic Adapter Functions\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: \"slideshow\",\n\t\t});\n\t\tthis.on(\"ready\", this.onReady.bind(this));\n\t\tthis.on(\"stateChange\", this.onStateChange.bind(this));\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\n\n\t\tthis.isUnloaded = false;\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\ttry{\n\t\t\t// Init Helper\n\t\t\tHelper = new GlobalHelper(this);\n\n\t\t\t// Create button for updates\n\t\t\tawait this.setObjectNotExistsAsync(\"updatepicturelist\", {\n\t\t\t\ttype: \"state\",\n\t\t\t\tcommon: {\n\t\t\t\t\tname: \"updatepicturelist\",\n\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\trole: \"button\",\n\t\t\t\t\tread: true,\n\t\t\t\t\twrite: true,\n\t\t\t\t\tdesc: \"Update picture list\",\n\t\t\t\t\tdef: false\n\t\t\t\t},\n\t\t\t\tnative: {},\n\t\t\t});\n\t\t\tawait this.setStateAsync(\"updatepicturelist\", false, true);\n\t\t\tthis.subscribeStates(\"updatepicturelist\");\n\n\t\t\t// Starting updatePictureStoreTimer action\n\t\t\tawait this.updatePictureStoreTimer();\n\t\t}catch(err){\n\t\t\tHelper.ReportingError(err as Error, MsgErrUnknown, \"onReady\");\n\t\t}\n\t}\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n\t\tif (state) {\n\t\t\tif (id === `${this.namespace}.updatepicturelist` && state?.val === true && state?.ack === false){\n\t\t\t\tif (UpdateRunning === true){\n\t\t\t\t\tHelper.ReportingInfo(\"Info\", \"Adapter\", \"Update picture list already running\");\n\t\t\t\t}else{\n\t\t\t\t\tHelper.ReportingInfo(\"Info\", \"Adapter\", \"Updating picture list\");\n\t\t\t\t\tclearTimeout(this.tUpdateCurrentPictureTimeout);\n\t\t\t\t\tawait this.updatePictureStoreTimer();\n\t\t\t\t}\n\t\t\t\tawait this.setStateAsync(\"updatepicturelist\", false, false);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\tthis.isUnloaded = true;\n\t\t\tclearTimeout(this.tUpdateCurrentPictureTimeout);\n\t\t\tclearTimeout(this.tUpdatePictureStoreTimeout);\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region Timer and Action\n\n\tprivate tUpdatePictureStoreTimeout: any = null;\n\tprivate tUpdateCurrentPictureTimeout: any = null;\n\n\tprivate async updatePictureStoreTimer(): Promise<void>{\n\t\tUpdateRunning = true;\n\t\tlet updatePictureStoreResult: PictureListUpdateResult = { success: false, picturecount: 0};\n\t\tHelper.ReportingInfo(\"Debug\", \"Adapter\", \"UpdatePictureStoreTimer occured\");\n\t\ttry{\n\t\t\tthis.tUpdatePictureStoreTimeout && clearTimeout(this.tUpdatePictureStoreTimeout);\n\t\t}catch(err){\n\t\t\tHelper.ReportingError(err as Error, MsgErrUnknown, \"updatePictureStoreTimer\", \"Clear Timer\");\n\t\t}\n\t\ttry{\n\t\t\tswitch(this.config.provider){\n\t\t\t\tcase 1:\n\t\t\t\t\tupdatePictureStoreResult = await slideBing.updatePictureList(Helper);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tupdatePictureStoreResult = await slideLocal.updatePictureList(Helper);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tupdatePictureStoreResult = await slideFS.updatePictureList(Helper);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tupdatePictureStoreResult = await slideSyno.updatePictureList(Helper);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}catch(err){\n\t\t\tHelper.ReportingError(err as Error, MsgErrUnknown, \"updatePictureStoreTimer\", \"Call Timer Action\");\n\t\t}\n\t\ttry{\n\t\t\tif (this.config.update_picture_list && this.config.update_picture_list > 0 && updatePictureStoreResult.success === true){\n\t\t\t\tHelper.ReportingInfo(\"Debug\", \"updatePictureStoreTimer\", `Update every ${this.config.update_picture_list} hours, starting timer`);\n\t\t\t\tthis.tUpdatePictureStoreTimeout = setTimeout(() => {\n\t\t\t\t\tthis.updatePictureStoreTimer();\n\t\t\t\t}, (this.config.update_picture_list * 3600000)); // Update every configured hours if successfull\n\t\t\t}else if (updatePictureStoreResult.success === false){\n\t\t\t\tthis.tUpdatePictureStoreTimeout = setTimeout(() => {\n\t\t\t\t\tthis.updatePictureStoreTimer();\n\t\t\t\t}, (this.config.update_interval * 300000)); // Update every minute if error\n\t\t\t}\n\t\t\tif (updatePictureStoreResult.success === true && updatePictureStoreResult.picturecount > 0 && this.isUnloaded === false){\n\t\t\t\t// Save picturecount\n\t\t\t\tawait this.setObjectNotExistsAsync(\"picturecount\", {\n\t\t\t\t\ttype: \"state\",\n\t\t\t\t\tcommon: {\n\t\t\t\t\t\tname: \"picturecount\",\n\t\t\t\t\t\ttype: \"number\",\n\t\t\t\t\t\trole: \"value\",\n\t\t\t\t\t\tread: true,\n\t\t\t\t\t\twrite: false,\n\t\t\t\t\t\tdesc: \"Pictures found\"\n\t\t\t\t\t},\n\t\t\t\t\tnative: {},\n\t\t\t\t});\n\t\t\t\tawait this.setStateAsync(\"picturecount\", { val: updatePictureStoreResult.picturecount, ack: true });\n\n\t\t\t\t// Starting updateCurrentPictureTimer action\n\t\t\t\tthis.updateCurrentPictureTimer();\n\t\t\t}\n\t\t}catch(err){\n\t\t\tHelper.ReportingError(err as Error, MsgErrUnknown, \"updatePictureStoreTimer\", \"Set Timer\");\n\t\t}\n\t\tUpdateRunning = false;\n\t}\n\n\tprivate async updateCurrentPictureTimer(): Promise<void>{\n\t\tlet CurrentPictureResult: Picture | null = null;\n\t\tlet Provider = \"\";\n\t\tHelper.ReportingInfo(\"Debug\", \"Adapter\", \"updateCurrentPictureTimer occured\");\n\t\ttry{\n\t\t\tthis.tUpdateCurrentPictureTimeout && clearTimeout(this.tUpdateCurrentPictureTimeout);\n\t\t}catch(err){\n\t\t\tHelper.ReportingError(err as Error, MsgErrUnknown, \"updateCurrentPictureTimer\", \"Clear Timer\");\n\t\t}\n\t\ttry{\n\t\t\tswitch(this.config.provider){\n\t\t\t\tcase 1:\n\t\t\t\t\tCurrentPictureResult = await slideBing.getPicture(Helper);\n\t\t\t\t\tProvider = \"Bing\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tCurrentPictureResult = await slideLocal.getPicture(Helper);\n\t\t\t\t\tProvider = \"Local\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tCurrentPictureResult = await slideFS.getPicture(Helper);\n\t\t\t\t\tProvider = \"FileSystem\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tCurrentPictureResult = await slideSyno.getPicture(Helper);\n\t\t\t\t\tProvider = \"Synology\";\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}catch(err){\n\t\t\tHelper.ReportingError(err as Error, MsgErrUnknown, \"updateCurrentPictureTimer\", \"Call Timer Action\");\n\t\t}\n\t\ttry{\n\t\t\tif (CurrentPictureResult !== null && this.isUnloaded === false){\n\t\t\t\tHelper.ReportingInfo(\"Debug\", Provider, `Set picture to ${CurrentPictureResult.path}`);\n\t\t\t\t// Set picture\n\t\t\t\tawait this.setObjectNotExistsAsync(\"picture\", {\n\t\t\t\t\ttype: \"state\",\n\t\t\t\t\tcommon: {\n\t\t\t\t\t\tname: \"picture\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\trole: \"text\",\n\t\t\t\t\t\tread: true,\n\t\t\t\t\t\twrite: false,\n\t\t\t\t\t\tdesc: \"Current picture\"\n\t\t\t\t\t},\n\t\t\t\t\tnative: {},\n\t\t\t\t});\n\t\t\t\tawait this.setStateAsync(\"picture\", { val: CurrentPictureResult.url, ack: true });\n\t\t\t\t// Set info1\n\t\t\t\tawait this.setObjectNotExistsAsync(\"info1\", {\n\t\t\t\t\ttype: \"state\",\n\t\t\t\t\tcommon: {\n\t\t\t\t\t\tname: \"info1\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\trole: \"text\",\n\t\t\t\t\t\tread: true,\n\t\t\t\t\t\twrite: false,\n\t\t\t\t\t\tdesc: \"Info 1 for picture\"\n\t\t\t\t\t},\n\t\t\t\t\tnative: {},\n\t\t\t\t});\n\t\t\t\tawait this.setStateAsync(\"info1\", { val: CurrentPictureResult.info1, ack: true });\n\t\t\t\t// Set info2\n\t\t\t\tawait this.setObjectNotExistsAsync(\"info2\", {\n\t\t\t\t\ttype: \"state\",\n\t\t\t\t\tcommon: {\n\t\t\t\t\t\tname: \"info2\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\trole: \"text\",\n\t\t\t\t\t\tread: true,\n\t\t\t\t\t\twrite: false,\n\t\t\t\t\t\tdesc: \"Info 2 for picture\"\n\t\t\t\t\t},\n\t\t\t\t\tnative: {},\n\t\t\t\t});\n\t\t\t\tawait this.setStateAsync(\"info2\", { val: CurrentPictureResult.info2, ack: true });\n\t\t\t\t// Set info3\n\t\t\t\tawait this.setObjectNotExistsAsync(\"info3\", {\n\t\t\t\t\ttype: \"state\",\n\t\t\t\t\tcommon: {\n\t\t\t\t\t\tname: \"info3\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\trole: \"text\",\n\t\t\t\t\t\tread: true,\n\t\t\t\t\t\twrite: false,\n\t\t\t\t\t\tdesc: \"Info 3 for picture\"\n\t\t\t\t\t},\n\t\t\t\t\tnative: {},\n\t\t\t\t});\n\t\t\t\tawait this.setStateAsync(\"info3\", { val: CurrentPictureResult.info3, ack: true });\n\t\t\t\t// Set date\n\t\t\t\tawait this.setObjectNotExistsAsync(\"date\", {\n\t\t\t\t\ttype: \"state\",\n\t\t\t\t\tcommon: {\n\t\t\t\t\t\tname: \"date\",\n\t\t\t\t\t\ttype: \"number\",\n\t\t\t\t\t\trole: \"date\",\n\t\t\t\t\t\tread: true,\n\t\t\t\t\t\twrite: false,\n\t\t\t\t\t\tdesc: \"Date of picture\"\n\t\t\t\t\t},\n\t\t\t\t\tnative: {},\n\t\t\t\t});\n\t\t\t\tawait this.setStateAsync(\"date\", { val: CurrentPictureResult.date?.getTime() || null , ack: true });\n\t\t\t}\n\t\t}catch(err){\n\t\t\tHelper.ReportingError(err as Error, MsgErrUnknown, \"updateCurrentPictureTimer\", \"Call Timer Action\");\n\t\t}\n\t\ttry{\n\t\t\tthis.tUpdateCurrentPictureTimeout = setTimeout(() => {\n\t\t\t\tthis.updateCurrentPictureTimer();\n\t\t\t}, (this.config.update_interval * 1000));\n\t\t}catch(err){\n\t\t\tHelper.ReportingError(err as Error, MsgErrUnknown, \"updateCurrentPictureTimer\", \"Set Timer\");\n\t\t}\n\t}\n\n}\n\nif (module.parent) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Slideshow(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new Slideshow())();\n}"],
  "mappings": "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",
  "names": []
}
